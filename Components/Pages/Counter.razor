@page "/"
@page "/pii-redaction"
@using PiiRedactionApp.Services
@using PiiRedactionApp.Models
@using System.Text.Json
@inject IBlobStorageService BlobStorageService
@inject IPiiDetectionService PiiDetectionService
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>PII Detection & Redaction Blazor App</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-12">
            <h1 class="text-center mb-4">
                <i class="bi bi-shield-check text-primary"></i> PII Detection & Redaction
            </h1>
            <p class="text-center text-muted mb-5">
                Automatically detect and redact personally identifiable information from PDF documents using Azure AI
            </p>
        </div>
    </div>

    <!-- Process Steps -->
    <div class="process-steps mb-5">
        <div class="process-step @(GetStepClass(1))">
            <div class="process-step-icon">📄</div>
            <div class="process-step-title">Upload PDF</div>
            <div class="process-step-description">Select document</div>
        </div>
        <div class="process-step @(GetStepClass(2))">
            <div class="process-step-icon">⚙️</div>
            <div class="process-step-title">Process</div>
            <div class="process-step-description">Detect PII</div>
        </div>
        <div class="process-step @(GetStepClass(3))">
            <div class="process-step-icon">🔍</div>
            <div class="process-step-title">Review</div>
            <div class="process-step-description">View results</div>
        </div>
        <div class="process-step @(GetStepClass(4))">
            <div class="process-step-icon">📋</div>
            <div class="process-step-title">Download</div>
            <div class="process-step-description">Get redacted PDF</div>
        </div>
    </div>

    <!-- Main Content -->
    @if (CurrentStep == 1)
    {
        <!-- Step 1: Upload PDF -->
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow-lg border-0">
                    <div class="card-header bg-primary text-white text-center py-4">
                        <h4 class="mb-0">
                            <i class="bi bi-cloud-upload"></i> Step 1: Upload Your PDF Document
                        </h4>
                        <p class="mb-0 mt-2 opacity-75">Select a PDF file to scan for personally identifiable information</p>
                    </div>
                    <div class="card-body p-5">
                        <div class="text-center mb-4">
                            <div class="upload-zone border-dashed p-5 rounded @(SelectedFile != null ? "border-success bg-light-success" : "border-secondary")">
                                @if (SelectedFile == null)
                                {
                                    <i class="bi bi-file-earmark-pdf display-1 text-muted mb-3"></i>
                                    <h5>Drag and drop your PDF here</h5>
                                    <p class="text-muted">or click to browse</p>
                                }
                                else
                                {
                                    <i class="bi bi-file-earmark-pdf-fill display-1 text-success mb-3"></i>
                                    <h5 class="text-success">@SelectedFile.Name</h5>
                                    <p class="text-muted">@FormatFileSize(SelectedFile.Size)</p>
                                }
                                <InputFile id="fileInput" OnChange="HandleFileSelected" accept=".pdf" class="form-control" />
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label for="sourceContainer" class="form-label fw-bold">Source Container</label>
                                <input @bind="SourceContainer" id="sourceContainer" class="form-control" placeholder="piisource" />
                                <small class="text-muted">Where to upload the original PDF</small>
                            </div>
                            <div class="col-md-6">
                                <label for="targetContainer" class="form-label fw-bold">Target Container</label>
                                <input @bind="TargetContainer" id="targetContainer" class="form-control" placeholder="piitarget" />
                                <small class="text-muted">Where to save the redacted PDF</small>
                            </div>
                        </div>

                        <div class="text-center">
                            <button class="btn btn-primary btn-lg px-5" @onclick="ProcessDocument" disabled="@(SelectedFile == null || IsProcessing)">
                                @if (IsProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <i class="bi bi-play-circle me-2"></i>
                                    <span>Start PII Detection</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (CurrentStep == 2)
    {
        <!-- Step 2: Processing -->
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow-lg border-0">
                    <div class="card-header bg-warning text-dark text-center py-4">
                        <h4 class="mb-0">
                            <i class="bi bi-gear-fill"></i> Step 2: Processing Document
                        </h4>
                        <p class="mb-0 mt-2">Analyzing your document for personally identifiable information...</p>
                    </div>
                    <div class="card-body p-5 text-center">
                        <div class="mb-4">
                            <div class="spinner-border text-warning" style="width: 4rem; height: 4rem;" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                        </div>
                        
                        @if (JobStatus != null)
                        {
                            <h5 class="mb-3">Job Status: @JobStatus.Status.ToUpperInvariant()</h5>
                            
                            @if (JobStatus.Tasks.Total > 0)
                            {
                                <div class="progress mb-3" style="height: 10px;">
                                    <div class="progress-bar @GetProgressBarClass(JobStatus.Status)" 
                                         role="progressbar" 
                                         style="width: @GetProgressPercentage()%" 
                                         aria-valuenow="@GetProgressPercentage()" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                <p class="text-muted">
                                    Completed: @JobStatus.Tasks.Completed / @JobStatus.Tasks.Total tasks
                                </p>
                            }
                            
                            <div class="mt-4">
                                <small class="text-muted">
                                    Job ID: <code>@CurrentJobId</code><br/>
                                    Started: @FormatDateTime(JobStatus.CreatedDateTime)
                                </small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else if (CurrentStep >= 3)
    {
        <!-- Step 3: Results Tab Interface -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-lg border-0">
                    <div class="card-header bg-success text-white">
                        <div class="d-flex justify-content-between align-items-center py-3">
                            <div>
                                <h4 class="mb-0">
                                    <i class="bi bi-check-circle"></i> Processing Complete!
                                </h4>
                                <p class="mb-0 mt-1 opacity-75">Your document has been successfully processed and is ready for review</p>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-light btn-sm" @onclick="StartNewProcess">
                                    <i class="bi bi-arrow-left"></i> Process New Document
                                </button>
                                <button class="btn btn-outline-light btn-sm" @onclick="DownloadResultsJson">
                                    <i class="bi bi-download"></i> Download JSON
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tab Navigation -->
                    <div class="card-body p-0">
                        <nav class="nav nav-tabs border-bottom" id="reviewTabs" role="tablist">
                            <button class="nav-link @(ActiveTab == "pdf" ? "active" : "")" 
                                    id="pdf-tab" 
                                    @onclick="@(() => SetActiveTab("pdf"))"
                                    type="button" 
                                    role="tab">
                                <i class="bi bi-file-earmark-pdf text-danger me-2"></i>
                                Redacted PDF
                            </button>
                            <button class="nav-link @(ActiveTab == "text" ? "active" : "")" 
                                    id="text-tab" 
                                    @onclick="@(() => SetActiveTab("text"))"
                                    type="button" 
                                    role="tab">
                                <i class="bi bi-file-text text-info me-2"></i>
                                Extracted Text
                            </button>
                            <button class="nav-link @(ActiveTab == "summary" ? "active" : "")" 
                                    id="summary-tab" 
                                    @onclick="@(() => SetActiveTab("summary"))"
                                    type="button" 
                                    role="tab">
                                <i class="bi bi-clipboard-data text-warning me-2"></i>
                                Processing Summary
                            </button>
                            <button class="nav-link @(ActiveTab == "download" ? "active" : "")" 
                                    id="download-tab" 
                                    @onclick="@(() => SetActiveTab("download"))"
                                    type="button" 
                                    role="tab">
                                <i class="bi bi-download text-success me-2"></i>
                                Downloads
                            </button>
                        </nav>
                        
                        <!-- Tab Content -->
                        <div class="tab-content" id="reviewTabsContent">
                            <!-- PDF Tab -->
                            @if (ActiveTab == "pdf")
                            {
                                <div class="tab-pane fade show active" id="pdf" role="tabpanel">
                                    @if (!string.IsNullOrEmpty(RedactedDocumentUrl))
                                    {
                                        <div class="d-flex justify-content-between align-items-center p-3 bg-light border-bottom">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-file-earmark-pdf text-danger me-2"></i>
                                                <span class="fw-semibold">Redacted Document</span>
                                                <span class="badge bg-success ms-2">Ready</span>
                                            </div>
                                            <div class="d-flex gap-2">
                                                <button class="btn btn-sm btn-outline-primary" @onclick="ToggleFullscreen">
                                                    <i class="bi bi-arrows-fullscreen"></i> Fullscreen
                                                </button>
                                                <a href="@RedactedDocumentUrl" target="_blank" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-download"></i> Download
                                                </a>
                                            </div>
                                        </div>
                                        <div class="pdf-viewer-container-full">
                                            <iframe src="@RedactedDocumentUrl" 
                                                    class="pdf-viewer-full"
                                                    frameborder="0"
                                                    title="Redacted PDF Document">
                                                <div class="text-center p-5">
                                                    <div class="alert alert-warning">
                                                        <i class="bi bi-exclamation-triangle"></i>
                                                        <strong>PDF Viewer Not Supported</strong>
                                                        <p class="mb-2">Your browser does not support inline PDF viewing.</p>
                                                        <a href="@RedactedDocumentUrl" target="_blank" class="btn btn-primary">
                                                            <i class="bi bi-download"></i> Download PDF Instead
                                                        </a>
                                                    </div>
                                                </div>
                                            </iframe>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center p-5">
                                            <div class="spinner-border text-primary mb-3" role="status">
                                                <span class="visually-hidden">Loading PDF...</span>
                                            </div>
                                            <h5>Preparing PDF Document</h5>
                                            <p class="text-muted">Please wait while we retrieve your redacted document...</p>
                                            @if (!string.IsNullOrEmpty(StatusMessage))
                                            {
                                                <div class="mt-3">
                                                    <small class="text-info">Status: @StatusMessage</small>
                                                </div>
                                            }
                                            <div class="mt-3">
                                                <button class="btn btn-outline-primary" @onclick="ViewRedactedPdf">
                                                    <i class="bi bi-arrow-clockwise"></i> Retry Loading PDF
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            
                            <!-- Text Tab -->
                            @if (ActiveTab == "text")
                            {
                                <div class="tab-pane fade show active" id="text" role="tabpanel">
                                    <div class="p-4">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-file-text text-info me-2"></i>
                                                <span class="fw-semibold">Extracted & Redacted Text</span>
                                            </div>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="CopyTextToClipboard">
                                                <i class="bi bi-clipboard"></i> Copy Text
                                            </button>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(RedactedContent))
                                        {
                                            <div class="card">
                                                <div class="card-body">
                                                    <pre class="mb-0 text-wrap" style="white-space: pre-wrap; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.5;">@RedactedContent</pre>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-5">
                                                <button class="btn btn-primary" @onclick="LoadRedactedText">
                                                    <i class="bi bi-eye"></i> Load Extracted Text
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            
                            <!-- Summary Tab -->
                            @if (ActiveTab == "summary")
                            {
                                <div class="tab-pane fade show active" id="summary" role="tabpanel">
                                    <div class="p-4">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <h5 class="mb-3">
                                                    <i class="bi bi-clipboard-data text-warning me-2"></i>
                                                    Processing Summary
                                                </h5>
                                                
                                                @if (JobStatus != null)
                                                {
                                                    <div class="row g-3">
                                                        <div class="col-sm-6">
                                                            <div class="card border-0 bg-light">
                                                                <div class="card-body text-center">
                                                                    <i class="bi bi-check-circle-fill text-success display-6"></i>
                                                                    <h6 class="mt-2 mb-1">Status</h6>
                                                                    <span class="badge bg-success">@JobStatus.Status.ToUpper()</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <div class="card border-0 bg-light">
                                                                <div class="card-body text-center">
                                                                    <i class="bi bi-list-task text-info display-6"></i>
                                                                    <h6 class="mt-2 mb-1">Tasks Completed</h6>
                                                                    <strong>@JobStatus.Tasks.Completed / @JobStatus.Tasks.Total</strong>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-12">
                                                            <div class="card border-0 bg-light">
                                                                <div class="card-body">
                                                                    <h6 class="mb-3">Processing Timeline</h6>
                                                                    <div class="d-flex justify-content-between small text-muted">
                                                                        <span>
                                                                            <i class="bi bi-play-circle me-1"></i>
                                                                            Started: @FormatDateTime(JobStatus.CreatedDateTime)
                                                                        </span>
                                                                        <span>
                                                                            <i class="bi bi-clock me-1"></i>
                                                                            Updated: @FormatDateTime(JobStatus.LastUpdatedDateTime)
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-md-4">
                                                <div class="card border-0 bg-primary text-white">
                                                    <div class="card-body">
                                                        <h6 class="mb-3">
                                                            <i class="bi bi-info-circle me-2"></i>
                                                            Job Details
                                                        </h6>
                                                        <div class="small">
                                                            <div class="mb-2">
                                                                <strong>Job ID:</strong><br>
                                                                <code class="text-light">@CurrentJobId</code>
                                                            </div>
                                                            <div class="mb-2">
                                                                <strong>Source:</strong> @SourceContainer
                                                            </div>
                                                            <div class="mb-2">
                                                                <strong>Target:</strong> @TargetContainer
                                                            </div>
                                                        </div>
                                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            <!-- Download Tab -->
            @if (ActiveTab == "download")
            {
                <div class="tab-pane fade show active" id="download" role="tabpanel">
                    <div class="p-4">
                        <div class="row justify-content-center">
                            <div class="col-md-8">
                                <h5 class="text-center mb-4">
                                    <i class="bi bi-download text-success me-2"></i>
                                    Download Your Results
                                </h5>
                                
                                <div class="row g-4">
                                    <!-- Redacted PDF Download -->
                                    <div class="col-md-6">
                                        <div class="card h-100 border-success">
                                            <div class="card-body text-center">
                                                <i class="bi bi-file-earmark-pdf text-danger display-4 mb-3"></i>
                                                <h6 class="card-title">Redacted PDF Document</h6>
                                                <p class="card-text text-muted small">
                                                    Download the processed PDF with PII information redacted
                                                </p>
                                                <button class="btn btn-success w-100" @onclick="DownloadRedactedPdf">
                                                    <i class="bi bi-download me-2"></i>
                                                    Download PDF
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- JSON Results Download -->
                                    <div class="col-md-6">
                                        <div class="card h-100 border-info">
                                            <div class="card-body text-center">
                                                <i class="bi bi-file-earmark-code text-info display-4 mb-3"></i>
                                                <h6 class="card-title">Processing Results (JSON)</h6>
                                                <p class="card-text text-muted small">
                                                    Download the complete processing results in JSON format
                                                </p>
                                                <button class="btn btn-info w-100" @onclick="DownloadResultsJson">
                                                    <i class="bi bi-download me-2"></i>
                                                    Download JSON
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Text Results Download -->
                                    <div class="col-md-6">
                                        <div class="card h-100 border-warning">
                                            <div class="card-body text-center">
                                                <i class="bi bi-file-earmark-text text-warning display-4 mb-3"></i>
                                                <h6 class="card-title">Redacted Text</h6>
                                                <p class="card-text text-muted small">
                                                    Download the extracted and redacted text content
                                                </p>
                                                <button class="btn btn-warning w-100" @onclick="DownloadRedactedText">
                                                    <i class="bi bi-download me-2"></i>
                                                    Download Text
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Processing Report -->
                                    <div class="col-md-6">
                                        <div class="card h-100 border-secondary">
                                            <div class="card-body text-center">
                                                <i class="bi bi-file-earmark-spreadsheet text-secondary display-4 mb-3"></i>
                                                <h6 class="card-title">Processing Report</h6>
                                                <p class="card-text text-muted small">
                                                    Download a summary report of the processing job
                                                </p>
                                                <button class="btn btn-secondary w-100" @onclick="DownloadProcessingReport">
                                                    <i class="bi bi-download me-2"></i>
                                                    Download Report
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }    }

    <!-- Simple Status Toast -->
    @if (!string.IsNullOrEmpty(CurrentJobId) && ShowStatusToast && CurrentStep >= 2)
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1055;">
            <div class="status-toast">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="d-flex align-items-center">
                        @if (JobStatus?.Status.Equals("succeeded", StringComparison.OrdinalIgnoreCase) == true)
                        {
                            <i class="bi bi-check-circle-fill text-success me-2"></i>
                            <strong>Complete!</strong>
                        }
                        else if (JobStatus?.Status.Equals("failed", StringComparison.OrdinalIgnoreCase) == true)
                        {
                            <i class="bi bi-x-circle-fill text-danger me-2"></i>
                            <strong>Failed</strong>
                        }
                        else
                        {
                            <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                            <strong>Processing...</strong>
                        }
                    </div>
                    <button type="button" class="btn-close" @onclick="ToggleStatusToast" aria-label="Close"></button>
                </div>
                
                @if (JobStatus != null && JobStatus.Tasks.Total > 0)
                {
                    <div class="progress mb-2" style="height: 6px;">
                        <div class="progress-bar @GetProgressBarClass(JobStatus.Status)" 
                             style="width: @GetProgressPercentage()%">
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">@JobStatus.Tasks.Completed of @JobStatus.Tasks.Total tasks</small>
                        <small class="text-muted">@GetProgressPercentage()%</small>
                    </div>
                }
                
                @if (JobStatus?.Status.Equals("succeeded", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <button class="btn btn-success btn-sm w-100 mt-2" @onclick="() => { CurrentStep = 3; ToggleStatusToast(); }">
                        <i class="bi bi-eye me-1"></i> View Results
                    </button>
                }
            </div>
        </div>
    }

    <!-- Simple Status Button -->
    @if (!string.IsNullOrEmpty(CurrentJobId) && !ShowStatusToast && CurrentStep >= 2)
    {
        <div class="position-fixed bottom-0 end-0 m-3" style="z-index: 1050;">
            <button class="status-button" @onclick="ToggleStatusToast">
                @if (JobStatus?.Status.Equals("succeeded", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <i class="bi bi-check-circle-fill text-white"></i>
                    <span>Done</span>
                }
                else if (JobStatus?.Status.Equals("failed", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <i class="bi bi-x-circle-fill text-white"></i>
                    <span>Error</span>
                }
                else
                {
                    <div class="spinner-border spinner-border-sm text-white"></div>
                    <span>@GetProgressPercentage()%</span>
                }
            </button>
        </div>
    }
</div>

@code {
    private IBrowserFile? SelectedFile;
    private string SourceContainer = "piisource";
    private string TargetContainer = "piitarget";
    private bool IsProcessing = false;
    private string StatusMessage = string.Empty;
    private string CurrentJobId = string.Empty;
    private PiiJobResponse? JobStatus;
    private Timer? StatusTimer;
    private bool ShowRedactedContent = false;
    private string RedactedContent = string.Empty;
    private string JobResultsJson = string.Empty;
    private bool ShowPdfViewer = false;
    private string RedactedDocumentUrl = string.Empty;
    private int CurrentStep = 1; // 1: Upload, 2: Processing, 3: Results
    private string ActiveTab = "pdf"; // Default tab for results view
    private bool ShowStatusToast = true; // Show toast by default when processing

    protected override void OnInitialized()
    {
        // Load default container names from configuration
        SourceContainer = Configuration["Azure:SourceContainer"] ?? "piisource";
        TargetContainer = Configuration["Azure:TargetContainer"] ?? "piitarget";
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        StatusMessage = $"Selected: {SelectedFile.Name} ({SelectedFile.Size:N0} bytes)";
        StateHasChanged();
    }

    private async Task ProcessDocument()
    {
        if (SelectedFile == null) return;

        try
        {
            IsProcessing = true;
            CurrentStep = 2; // Move to processing step
            ShowStatusToast = true; // Show toast when processing starts
            StatusMessage = "Uploading file to Azure Blob Storage...";
            StateHasChanged();

            // Upload file to blob storage
            using var stream = SelectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            var fileName = await BlobStorageService.UploadFileAsync(stream, SelectedFile.Name, SourceContainer);

            StatusMessage = "Generating SAS URLs...";
            StateHasChanged();

            // Generate SAS URLs
            var sourceSasUrl = await BlobStorageService.GenerateSasUrl(SourceContainer, fileName, TimeSpan.FromHours(48));
            var targetSasUrl = await BlobStorageService.GenerateContainerSasUrl(TargetContainer, TimeSpan.FromHours(48));

            StatusMessage = "Submitting PII detection job...";
            StateHasChanged();

            // Submit PII job
            CurrentJobId = await PiiDetectionService.SubmitPiiJobAsync(fileName, sourceSasUrl, targetSasUrl);
            
            StatusMessage = $"Job submitted successfully! Job ID: {CurrentJobId}";
            
            // Start polling for status
            StartStatusPolling();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private void StartStatusPolling()
    {
        StatusTimer?.Dispose();
        StatusTimer = new Timer(async _ =>
        {
            if (!string.IsNullOrEmpty(CurrentJobId))
            {
                await CheckJobStatus();
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task CheckJobStatus()
    {
        try
        {
            JobStatus = await PiiDetectionService.GetJobStatusAsync(CurrentJobId);

            if (JobStatus.Status.Equals("succeeded", StringComparison.OrdinalIgnoreCase))
            {
                StatusTimer?.Dispose();
                StatusTimer = null;
                CurrentStep = 3; // Move to results step
                
                // Auto-load PDF when moving to results step (since PDF is the default tab)
                if (string.IsNullOrEmpty(RedactedDocumentUrl))
                {
                    _ = Task.Run(async () => await ViewRedactedPdf());
                }
            }
            else if (JobStatus.Status.Equals("failed", StringComparison.OrdinalIgnoreCase))
            {
                StatusTimer?.Dispose();
                StatusTimer = null;
                CurrentStep = 1; // Return to upload step on failure
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error checking job status: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ViewRedactedResults()
    {
        try
        {
            if (string.IsNullOrEmpty(JobResultsJson))
            {
                StatusMessage = "Loading redacted results...";
                StateHasChanged();
                
                JobResultsJson = await PiiDetectionService.GetJobResultsAsync(CurrentJobId);
            }

            // Parse the JSON to extract redacted text
            using var document = JsonDocument.Parse(JobResultsJson);
            var root = document.RootElement;
            
            if (root.TryGetProperty("tasks", out var tasks) && 
                tasks.TryGetProperty("items", out var items) && 
                items.GetArrayLength() > 0)
            {
                var firstTask = items[0];
                if (firstTask.TryGetProperty("results", out var results) &&
                    results.TryGetProperty("documents", out var documents) &&
                    documents.GetArrayLength() > 0)
                {
                    var firstDoc = documents[0];
                    if (firstDoc.TryGetProperty("redactedText", out var redactedText))
                    {
                        RedactedContent = redactedText.GetString() ?? "No redacted content found.";
                        ShowRedactedContent = true;
                        StatusMessage = "Redacted content loaded successfully.";
                    }
                    else
                    {
                        RedactedContent = "Redacted text not found in results.";
                        ShowRedactedContent = true;
                        StatusMessage = "Results loaded but no redacted text found.";
                    }
                }
                else
                {
                    StatusMessage = "No document results found in API response.";
                }
            }
            else
            {
                StatusMessage = "No task results found in API response.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading redacted results: {ex.Message}";
        }
        
        StateHasChanged();
    }



    private async Task DownloadResultsJson()
    {
        try
        {
            if (string.IsNullOrEmpty(JobResultsJson))
            {
                JobResultsJson = await PiiDetectionService.GetJobResultsAsync(CurrentJobId);
            }

            // Create a downloadable JSON file
            var fileName = $"pii_results_{CurrentJobId}.json";
            var bytes = System.Text.Encoding.UTF8.GetBytes(JobResultsJson);
            var base64 = Convert.ToBase64String(bytes);
            var dataUrl = $"data:application/json;base64,{base64}";

            await JSRuntime.InvokeVoidAsync("downloadFile", dataUrl, fileName);
            
            StatusMessage = "JSON results downloaded successfully.";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error downloading JSON results: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task DownloadDocument()
    {
        try
        {
            StatusMessage = "Getting redacted document URL...";
            StateHasChanged();

            var documentUrl = await PiiDetectionService.GetRedactedDocumentUrlAsync(CurrentJobId);
            
            if (!string.IsNullOrEmpty(documentUrl))
            {
                // Open the redacted document in a new tab for download
                await JSRuntime.InvokeAsync<object>("open", documentUrl, "_blank");
                StatusMessage = "Redacted document opened for download.";
            }
            else
            {
                StatusMessage = "No redacted document URL found. The document may not have been generated successfully.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error downloading redacted document: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private void HideRedactedResults()
    {
        ShowRedactedContent = false;
        StateHasChanged();
    }

    private async Task ViewRedactedPdf()
    {
        try
        {
            if (!string.IsNullOrEmpty(CurrentJobId))
            {
                StatusMessage = "Loading redacted PDF...";
                await InvokeAsync(StateHasChanged);
                
                StatusMessage = "Requesting redacted document URL from service...";
                await InvokeAsync(StateHasChanged);
                
                var blobUrl = await PiiDetectionService.GetRedactedDocumentUrlAsync(CurrentJobId) ?? string.Empty;
                
                StatusMessage = $"Received blob URL: {(!string.IsNullOrEmpty(blobUrl) ? "Success" : "Empty")}";
                await InvokeAsync(StateHasChanged);
                
                if (!string.IsNullOrEmpty(blobUrl))
                {
                    StatusMessage = "Extracting blob information...";
                    await InvokeAsync(StateHasChanged);
                    
                    // Extract container name and blob name from the Azure blob URL
                    var (containerName, blobName) = ExtractBlobInfo(blobUrl);
                    
                    if (!string.IsNullOrEmpty(containerName) && !string.IsNullOrEmpty(blobName))
                    {
                        // Use our controller endpoint instead of direct blob URL
                        RedactedDocumentUrl = $"/api/pdf/view/{containerName}/{Uri.EscapeDataString(blobName)}";
                        ShowPdfViewer = true;
                        StatusMessage = $"PDF ready: /api/pdf/view/{containerName}/{blobName}";
                        await InvokeAsync(StateHasChanged);
                    }
                    else
                    {
                        StatusMessage = $"Invalid blob URL format. Container: '{containerName}', Blob: '{blobName}'";
                        await InvokeAsync(StateHasChanged);
                    }
                }
                else
                {
                    StatusMessage = "No redacted PDF found for this job. The document may still be processing.";
                    await InvokeAsync(StateHasChanged);
                }
            }
            else
            {
                StatusMessage = "No job ID available.";
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading redacted PDF: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private (string containerName, string blobName) ExtractBlobInfo(string blobUrl)
    {
        try
        {
            StatusMessage = $"Parsing blob URL: {blobUrl}";
            
            var uri = new Uri(blobUrl);
            var pathSegments = uri.AbsolutePath.TrimStart('/').Split('/', StringSplitOptions.RemoveEmptyEntries);
            
            StatusMessage = $"Path segments: {string.Join(", ", pathSegments)}";
            
            if (pathSegments.Length >= 2)
            {
                var containerName = pathSegments[0];
                var blobName = string.Join("/", pathSegments.Skip(1));
                
                // Remove any query parameters from the blob name
                if (blobName.Contains('?'))
                {
                    blobName = blobName.Substring(0, blobName.IndexOf('?'));
                }
                
                StatusMessage = $"Extracted - Container: {containerName}, Blob: {blobName}";
                return (containerName, blobName);
            }
            else
            {
                StatusMessage = $"Invalid URL format. Expected at least 2 path segments, got {pathSegments.Length}";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error parsing blob URL: {ex.Message}";
        }
        
        return (string.Empty, string.Empty);
    }

    private void HidePdfViewer()
    {
        ShowPdfViewer = false;
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status) => status.ToLowerInvariant() switch
    {
        "running" or "notstarted" => "bg-warning",
        "succeeded" => "bg-success",
        "failed" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetProgressBarClass(string status) => status.ToLowerInvariant() switch
    {
        "running" => "progress-bar-striped progress-bar-animated bg-info",
        "succeeded" => "bg-success",
        "failed" => "bg-danger",
        _ => "bg-secondary"
    };

    private int GetProgressPercentage()
    {
        if (JobStatus?.Tasks.Total == 0) return 0;
        return (int)((double)(JobStatus?.Tasks.Completed ?? 0) / (JobStatus?.Tasks.Total ?? 1) * 100);
    }

    private string FormatDateTime(string dateTimeString)
    {
        if (DateTime.TryParse(dateTimeString, out var dateTime))
        {
            return dateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }
        return dateTimeString;
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1) {
            order++;
            len = len / 1024;
        }
        return $"{len:0.#} {sizes[order]}";
    }

    private void ToggleFullscreen()
    {
        // This could be enhanced with JavaScript to actually toggle fullscreen
        // For now, just a placeholder
        StateHasChanged();
    }

    private string GetStepClass(int stepNumber)
    {
        if (stepNumber < CurrentStep)
            return "completed";
        else if (stepNumber == CurrentStep)
            return "active";
        else
            return "";
    }

    private async void SetActiveTab(string tabName)
    {
        ActiveTab = tabName;
        StateHasChanged();
        
        // Auto-load content when switching to specific tabs
        if (tabName == "pdf" && string.IsNullOrEmpty(RedactedDocumentUrl))
        {
            await ViewRedactedPdf();
        }
        else if (tabName == "text" && string.IsNullOrEmpty(RedactedContent))
        {
            await LoadRedactedText();
        }
    }

    private void StartNewProcess()
    {
        // Reset all state
        CurrentStep = 1;
        ActiveTab = "pdf";
        SelectedFile = null;
        IsProcessing = false;
        StatusMessage = string.Empty;
        CurrentJobId = string.Empty;
        JobStatus = null;
        StatusTimer?.Dispose();
        StatusTimer = null;
        ShowRedactedContent = false;
        RedactedContent = string.Empty;
        JobResultsJson = string.Empty;
        ShowPdfViewer = false;
        RedactedDocumentUrl = string.Empty;
        ShowStatusToast = true;
        StateHasChanged();
    }

    private async Task LoadRedactedText()
    {
        if (string.IsNullOrEmpty(RedactedContent))
        {
            await ViewRedactedResults();
        }
    }

    private async Task CopyTextToClipboard()
    {
        if (!string.IsNullOrEmpty(RedactedContent))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", RedactedContent);
            // Could show a toast notification here
        }
    }

    private void ToggleStatusToast()
    {
        ShowStatusToast = !ShowStatusToast;
        StateHasChanged();
    }

    private async Task DownloadRedactedPdf()
    {
        try
        {
            StatusMessage = "Getting redacted document URL...";
            StateHasChanged();

            var documentUrl = await PiiDetectionService.GetRedactedDocumentUrlAsync(CurrentJobId);
            
            if (!string.IsNullOrEmpty(documentUrl))
            {
                // Use the controller endpoint for downloading
                var (containerName, blobName) = ExtractBlobInfo(documentUrl);
                
                if (!string.IsNullOrEmpty(containerName) && !string.IsNullOrEmpty(blobName))
                {
                    var downloadUrl = $"/api/pdf/download/{containerName}/{Uri.EscapeDataString(blobName)}";
                    await JSRuntime.InvokeAsync<object>("open", downloadUrl, "_blank");
                    StatusMessage = "Redacted PDF download started.";
                }
                else
                {
                    StatusMessage = "Invalid document URL format.";
                }
            }
            else
            {
                StatusMessage = "No redacted document URL found.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error downloading PDF: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task DownloadRedactedText()
    {
        try
        {
            if (string.IsNullOrEmpty(RedactedContent))
            {
                await LoadRedactedText();
            }

            if (!string.IsNullOrEmpty(RedactedContent))
            {
                var fileName = $"redacted_text_{CurrentJobId}.txt";
                var bytes = System.Text.Encoding.UTF8.GetBytes(RedactedContent);
                var base64 = Convert.ToBase64String(bytes);
                var dataUrl = $"data:text/plain;base64,{base64}";

                await JSRuntime.InvokeVoidAsync("downloadFile", dataUrl, fileName);
                StatusMessage = "Redacted text downloaded successfully.";
            }
            else
            {
                StatusMessage = "No redacted text content available.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error downloading text: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task DownloadProcessingReport()
    {
        try
        {
            if (JobStatus == null)
            {
                StatusMessage = "No job status available for report.";
                return;
            }

            var report = $@"PII Redaction Processing Report
=====================================

Job ID: {CurrentJobId}
Status: {JobStatus.Status}
Created: {FormatDateTime(JobStatus.CreatedDateTime)}
Last Updated: {FormatDateTime(JobStatus.LastUpdatedDateTime)}

Task Summary:
- Total Tasks: {JobStatus.Tasks.Total}
- Completed: {JobStatus.Tasks.Completed}
- Failed: {JobStatus.Tasks.Failed}
- In Progress: {JobStatus.Tasks.InProgress}

Configuration:
- Source Container: {SourceContainer}
- Target Container: {TargetContainer}

Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}
";

            var fileName = $"pii_processing_report_{CurrentJobId}.txt";
            var bytes = System.Text.Encoding.UTF8.GetBytes(report);
            var base64 = Convert.ToBase64String(bytes);
            var dataUrl = $"data:text/plain;base64,{base64}";

            await JSRuntime.InvokeVoidAsync("downloadFile", dataUrl, fileName);
            StatusMessage = "Processing report downloaded successfully.";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error generating report: {ex.Message}";
        }
        
        StateHasChanged();
    }

    public void Dispose()
    {
        StatusTimer?.Dispose();
    }
}
