@page "/pii-redaction"
@using PiiRedactionApp.Services
@using PiiRedactionApp.Models
@using System.Text.Json
@inject IBlobStorageService BlobStorageService
@inject IPiiDetectionService PiiDetectionService
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>PII Redaction Tool</PageTitle>

<div class="container-fluid py-4">
    <h1 class="mb-4">
        <i class="bi bi-shield-check"></i> PII Detection & Redaction
    </h1>

    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-cloud-upload"></i> Upload PDF Document
                    </h5>
                </div>
                <div class="card-body">
                    @if (!IsProcessing)
                    {
                        <div class="mb-3">
                            <label for="fileInput" class="form-label">Select PDF file to process:</label>
                            <InputFile id="fileInput" OnChange="HandleFileSelected" accept=".pdf" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label for="sourceContainer" class="form-label">Source Container:</label>
                            <input @bind="SourceContainer" id="sourceContainer" class="form-control" placeholder="piisource" />
                        </div>

                        <div class="mb-3">
                            <label for="targetContainer" class="form-label">Target Container:</label>
                            <input @bind="TargetContainer" id="targetContainer" class="form-control" placeholder="piitarget" />
                        </div>

                        <button class="btn btn-primary" @onclick="ProcessDocument" disabled="@(SelectedFile == null)">
                            <i class="bi bi-play-circle"></i> Process Document
                        </button>
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                            <p class="mt-2">Processing document...</p>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="alert @(StatusMessage.Contains("Error") ? "alert-danger" : "alert-info") mt-3">
                            @StatusMessage
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-activity"></i> Processing Status
                    </h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(CurrentJobId))
                    {
                        <div class="mb-3">
                            <strong>Job ID:</strong> 
                            <code class="text-muted">@CurrentJobId</code>
                        </div>

                        @if (JobStatus != null)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span><strong>Status:</strong></span>
                                    <span class="badge @GetStatusBadgeClass(JobStatus.Status)">
                                        @JobStatus.Status.ToUpperInvariant()
                                    </span>
                                </div>
                                
                                @if (JobStatus.Tasks.Total > 0)
                                {
                                    <div class="progress mb-2">
                                        <div class="progress-bar @GetProgressBarClass(JobStatus.Status)" 
                                             role="progressbar" 
                                             style="width: @GetProgressPercentage()%" 
                                             aria-valuenow="@GetProgressPercentage()" 
                                             aria-valuemin="0" 
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                    <small class="text-muted">
                                        Completed: @JobStatus.Tasks.Completed / @JobStatus.Tasks.Total
                                        @if (JobStatus.Tasks.Failed > 0)
                                        {
                                            <span class="text-danger"> | Failed: @JobStatus.Tasks.Failed</span>
                                        }
                                    </small>
                                }

                                <div class="mt-3">
                                    <small class="text-muted">
                                        <strong>Created:</strong> @FormatDateTime(JobStatus.CreatedDateTime)<br/>
                                        <strong>Last Updated:</strong> @FormatDateTime(JobStatus.LastUpdatedDateTime)
                                    </small>
                                </div>
                            </div>

                            @if (JobStatus.Status.Equals("succeeded", StringComparison.OrdinalIgnoreCase))
                            {
                                <div class="alert alert-success">
                                    <i class="bi bi-check-circle"></i> 
                                    Processing completed successfully! Your redacted results are ready.
                                </div>
                                
                                <button class="btn btn-success" @onclick="ViewRedactedResults">
                                    <i class="bi bi-eye"></i> View Redacted Results
                                </button>
                                <button class="btn btn-outline-info ms-2" @onclick="DownloadResultsJson">
                                    <i class="bi bi-download"></i> Download JSON Results
                                </button>
                                <button class="btn btn-info ms-2" @onclick="DownloadDocument">
                                    <i class="bi bi-file-earmark-pdf"></i> Download Document
                                </button>
                                
                                @if (ShowRedactedContent && !string.IsNullOrEmpty(RedactedContent))
                                {
                                    <div class="mt-3">
                                        <div class="card">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">
                                                    <i class="bi bi-file-text"></i> Redacted Content
                                                    <button class="btn btn-sm btn-outline-secondary float-end" @onclick="HideRedactedResults">
                                                        <i class="bi bi-x"></i> Hide
                                                    </button>
                                                </h6>
                                            </div>
                                            <div class="card-body">
                                                <pre class="bg-light p-3 rounded" style="max-height: 300px; overflow-y: auto; white-space: pre-wrap;">@RedactedContent</pre>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (JobStatus.Status.Equals("failed", StringComparison.OrdinalIgnoreCase))
                            {
                                <div class="alert alert-danger">
                                    <i class="bi bi-exclamation-triangle"></i> 
                                    Processing failed. Please try again.
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center">
                            <i class="bi bi-info-circle"></i> 
                            No active job. Upload a document to start processing.
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IBrowserFile? SelectedFile;
    private string SourceContainer = "piisource";
    private string TargetContainer = "piitarget";
    private bool IsProcessing = false;
    private string StatusMessage = string.Empty;
    private string CurrentJobId = string.Empty;
    private PiiJobResponse? JobStatus;
    private Timer? StatusTimer;
    private bool ShowRedactedContent = false;
    private string RedactedContent = string.Empty;
    private string JobResultsJson = string.Empty;

    protected override void OnInitialized()
    {
        // Load default container names from configuration
        SourceContainer = Configuration["Azure:SourceContainer"] ?? "piisource";
        TargetContainer = Configuration["Azure:TargetContainer"] ?? "piitarget";
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        StatusMessage = $"Selected: {SelectedFile.Name} ({SelectedFile.Size:N0} bytes)";
        StateHasChanged();
    }

    private async Task ProcessDocument()
    {
        if (SelectedFile == null) return;

        try
        {
            IsProcessing = true;
            StatusMessage = "Uploading file to Azure Blob Storage...";
            StateHasChanged();

            // Upload file to blob storage
            using var stream = SelectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            var fileName = await BlobStorageService.UploadFileAsync(stream, SelectedFile.Name, SourceContainer);

            StatusMessage = "Generating SAS URLs...";
            StateHasChanged();

            // Generate SAS URLs
            var sourceSasUrl = await BlobStorageService.GenerateSasUrl(SourceContainer, fileName, TimeSpan.FromHours(48));
            var targetSasUrl = await BlobStorageService.GenerateContainerSasUrl(TargetContainer, TimeSpan.FromHours(48));

            StatusMessage = "Submitting PII detection job...";
            StateHasChanged();

            // Submit PII job
            CurrentJobId = await PiiDetectionService.SubmitPiiJobAsync(fileName, sourceSasUrl, targetSasUrl);
            
            StatusMessage = $"Job submitted successfully! Job ID: {CurrentJobId}";
            
            // Start polling for status
            StartStatusPolling();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private void StartStatusPolling()
    {
        StatusTimer?.Dispose();
        StatusTimer = new Timer(async _ =>
        {
            if (!string.IsNullOrEmpty(CurrentJobId))
            {
                await CheckJobStatus();
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task CheckJobStatus()
    {
        try
        {
            JobStatus = await PiiDetectionService.GetJobStatusAsync(CurrentJobId);

            if (JobStatus.Status.Equals("succeeded", StringComparison.OrdinalIgnoreCase) ||
                JobStatus.Status.Equals("failed", StringComparison.OrdinalIgnoreCase))
            {
                StatusTimer?.Dispose();
                StatusTimer = null;
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error checking job status: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ViewRedactedResults()
    {
        try
        {
            if (string.IsNullOrEmpty(JobResultsJson))
            {
                StatusMessage = "Loading redacted results...";
                StateHasChanged();
                
                JobResultsJson = await PiiDetectionService.GetJobResultsAsync(CurrentJobId);
            }

            // Parse the JSON to extract redacted text
            using var document = JsonDocument.Parse(JobResultsJson);
            var root = document.RootElement;
            
            if (root.TryGetProperty("tasks", out var tasks) && 
                tasks.TryGetProperty("items", out var items) && 
                items.GetArrayLength() > 0)
            {
                var firstTask = items[0];
                if (firstTask.TryGetProperty("results", out var results) &&
                    results.TryGetProperty("documents", out var documents) &&
                    documents.GetArrayLength() > 0)
                {
                    var firstDoc = documents[0];
                    if (firstDoc.TryGetProperty("redactedText", out var redactedText))
                    {
                        RedactedContent = redactedText.GetString() ?? "No redacted content found.";
                        ShowRedactedContent = true;
                        StatusMessage = "Redacted content loaded successfully.";
                    }
                    else
                    {
                        RedactedContent = "Redacted text not found in results.";
                        ShowRedactedContent = true;
                        StatusMessage = "Results loaded but no redacted text found.";
                    }
                }
                else
                {
                    StatusMessage = "No document results found in API response.";
                }
            }
            else
            {
                StatusMessage = "No task results found in API response.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading redacted results: {ex.Message}";
        }
        
        StateHasChanged();
    }



    private async Task DownloadResultsJson()
    {
        try
        {
            if (string.IsNullOrEmpty(JobResultsJson))
            {
                JobResultsJson = await PiiDetectionService.GetJobResultsAsync(CurrentJobId);
            }

            // Create a downloadable JSON file
            var fileName = $"pii_results_{CurrentJobId}.json";
            var bytes = System.Text.Encoding.UTF8.GetBytes(JobResultsJson);
            var base64 = Convert.ToBase64String(bytes);
            var dataUrl = $"data:application/json;base64,{base64}";

            await JSRuntime.InvokeVoidAsync("downloadFile", dataUrl, fileName);
            
            StatusMessage = "JSON results downloaded successfully.";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error downloading JSON results: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task DownloadDocument()
    {
        try
        {
            StatusMessage = "Getting redacted document URL...";
            StateHasChanged();

            var documentUrl = await PiiDetectionService.GetRedactedDocumentUrlAsync(CurrentJobId);
            
            if (!string.IsNullOrEmpty(documentUrl))
            {
                // Open the redacted document in a new tab for download
                await JSRuntime.InvokeAsync<object>("open", documentUrl, "_blank");
                StatusMessage = "Redacted document opened for download.";
            }
            else
            {
                StatusMessage = "No redacted document URL found. The document may not have been generated successfully.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error downloading redacted document: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private void HideRedactedResults()
    {
        ShowRedactedContent = false;
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status) => status.ToLowerInvariant() switch
    {
        "running" or "notstarted" => "bg-warning",
        "succeeded" => "bg-success",
        "failed" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetProgressBarClass(string status) => status.ToLowerInvariant() switch
    {
        "running" => "progress-bar-striped progress-bar-animated bg-info",
        "succeeded" => "bg-success",
        "failed" => "bg-danger",
        _ => "bg-secondary"
    };

    private int GetProgressPercentage()
    {
        if (JobStatus?.Tasks.Total == 0) return 0;
        return (int)((double)(JobStatus?.Tasks.Completed ?? 0) / (JobStatus?.Tasks.Total ?? 1) * 100);
    }

    private string FormatDateTime(string dateTimeString)
    {
        if (DateTime.TryParse(dateTimeString, out var dateTime))
        {
            return dateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }
        return dateTimeString;
    }

    public void Dispose()
    {
        StatusTimer?.Dispose();
    }
}
